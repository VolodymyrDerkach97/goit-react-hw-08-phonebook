{"version":3,"file":"static/js/4.e04c0d34.chunk.js","mappings":"0LAEaA,E,QAAcC,EAAAA,IAAH,kE,+JCSlBC,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,GACI,mBACPE,IAAI,EAAG,iDACPC,SAAS,oBACTC,QAAQ,eAAgB,iDAC3BC,MAAOL,EAAAA,GACG,oBACPK,MAAM,uBACNF,SAAS,qBACZG,SAAUN,EAAAA,GACA,uBACPE,IAAI,EAAG,qDACPC,SAAS,0BAGDI,EAAe,WAC1B,IAAMC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbd,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZP,iBAAkBA,EAClBiB,SAAU,SAAAC,GACRN,GACEO,EAAAA,EAAAA,IAAS,CACPjB,KAAMgB,EAAMhB,KACZI,MAAOY,EAAMZ,MACbC,SAAUW,EAAMX,WAGrB,IAGH,OACE,+BACE,SAAC,IAAD,WACE,kBAAMU,SAAUH,EAAOM,aAAvB,WACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPC,GAAG,OACHtB,KAAK,OACLuB,MAAM,OACNP,MAAOJ,EAAOY,OAAOxB,KACrByB,SAAUb,EAAOc,aACjBC,MAAOf,EAAOgB,QAAQ5B,MAAQ6B,QAAQjB,EAAOkB,OAAO9B,MACpD+B,WAAYnB,EAAOgB,QAAQ5B,MAAQY,EAAOkB,OAAO9B,QAEnD,SAACmB,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPC,GAAG,QACHtB,KAAK,QACLuB,MAAM,QACNP,MAAOJ,EAAOY,OAAOpB,MACrBqB,SAAUb,EAAOc,aACjBC,MAAOf,EAAOgB,QAAQxB,OAASyB,QAAQjB,EAAOkB,OAAO1B,OACrD2B,WAAYnB,EAAOgB,QAAQxB,OAASQ,EAAOkB,OAAO1B,SAEpD,SAACe,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPC,GAAG,WACHtB,KAAK,WACLuB,MAAM,WACNS,KAAK,WACLhB,MAAOJ,EAAOY,OAAOnB,SACrBoB,SAAUb,EAAOc,aACjBC,MAAOf,EAAOgB,QAAQvB,UAAYwB,QAAQjB,EAAOkB,OAAOzB,UACxD0B,WAAYnB,EAAOgB,QAAQvB,UAAYO,EAAOkB,OAAOzB,WAEtC,MAAhBE,GACC,gBAAK0B,MAAO,CAAEC,MAAO,OAArB,gDAIA,IAEF,SAACC,EAAA,EAAD,CAAQD,MAAM,UAAUE,QAAQ,YAAYhB,WAAS,EAACY,KAAK,SAA3D,4BAOT,EC5FD,EAPiB,WACf,OACE,0BACE,SAAC1B,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.style.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const WrapperForm = styled.div`\n  max-width: 600px;\n  margin: 15px auto;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { selectStatusError } from 'redux/auth/selectors';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { WrapperForm } from '../LoginForm/LoginForm.style';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string('Enter your name')\n    .min(2, 'Name should be of minimum 2 characters length')\n    .required('Name is required')\n    .matches(/^[aA-zZ\\s]+$/, 'Only Latin letters are allowed for this field'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const statusError = useSelector(selectStatusError);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: value => {\n      dispatch(\n        register({\n          name: value.name,\n          email: value.email,\n          password: value.password,\n        })\n      );\n    },\n  });\n\n  return (\n    <>\n      <WrapperForm>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            fullWidth\n            margin=\"dense\"\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            fullWidth\n            margin=\"dense\"\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}\n          />\n          <TextField\n            fullWidth\n            margin=\"dense\"\n            id=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n          {statusError === 400 ? (\n            <div style={{ color: 'red' }}>\n              Unable to register with this email\n            </div>\n          ) : (\n            ''\n          )}\n          <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n            Register\n          </Button>\n        </form>\n      </WrapperForm>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n};\nexport default Register;\n"],"names":["WrapperForm","styled","validationSchema","yup","name","min","required","matches","email","password","RegisterForm","statusError","useSelector","selectStatusError","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","value","register","handleSubmit","TextField","fullWidth","margin","id","label","values","onChange","handleChange","error","touched","Boolean","errors","helperText","type","style","color","Button","variant"],"sourceRoot":""}